local set = require("shark/util/set")
local util = require("shark/util/util")

local wrapBaggedObject = require("shark/tts/wrap_bagged_object")
local UiDom = require("shark/tts/ui_dom")

-- DEBUG
local debug = require("shark/util/debug")

local Game = require("shark/game")

local DropZoneModel = require("shark/game/drop_zone/drop_zone_model")
local DropZoneReturnButtonModel = require("shark/game/drop_zone/return_button_model")
local MoneyCounterModel = require("shark/game/drop_zone/money_counter_model")
local PlayerShareCardZoneModel = require("shark/game/player_share_card_zone/player_share_card_zone_model")
local HandZoneModel = require("shark/game/hand_zone_model")

local LeaderboardController = require("shark/game/leaderboard/leaderboard_controller")
local AssetCountersController = require("shark/game/asset_counters/asset_counters_controller")
local ControlBarController = require("shark/game/control_bar/control_bar_controller")
local GraphController = require("shark/game/graph_controller")

local SAVED_STATE_VERSION = 1

local SEAT_COLORS = {
    'White',
    'Red',
    'Yellow',
    'Green',
    'Blue',
    'Purple',
}

local SEAT_COLOR_SET = set.new(SEAT_COLORS)

local SCRIPTING_BUTTON_BUY_SHARE = 10
local SCRIPTING_BUTTON_DEBUG = 7 -- DEBUG

local GUIDS = {
    board = '12bb20',

    numbered_die = '5248eb',

    money_deposit_markers = {
        [1] = 'cb10ca',
        [5] = 'c6fff2',
        [10] = '6396b9',
        [50] = 'd9c185',
    },

    building_bags = {
        green = '062411',
        red = '16b065',
        blue = 'bd55ee',
        yellow = 'c47da9',
    },

    discarded_building_bag = '47b9a5',

    indicators = {
        green = '65f72d',
        red = 'c7426a',
        blue = 'd4bd37',
        yellow = 'b96f7a',
    },

    drop_zones = {
        '558917',
        '2dc3c1',
    },

    player_share_card_zones = {
        White = '64d891',
        Red = '9dae36',
        Yellow = '0356a0',
        Green = 'a1d77d',
        Blue = '51fa09',
        Purple = '9d30f7',
    },

    -- These are actually scripting zones on top of the real hand zones.
    hand_zones = {
        White = '6ce9b9',
        Red = '980351',
        Yellow = '008eed',
        Green = 'f2c6f5',
        Blue = '677e18',
        Purple = '4053a7',
    },

    graph_boards = {
        'd8b4ea',
        'a86554',
        'fe56ea',
    },
}

local MIN_DICE_ROLL_VELOCITY_SQUARED = 64 -- 8^2

-- z values are relative to the board. Translating, scaling, or rotating the
-- board has no effect on these values.
local SHARE_PRICE_TRANSFORM = {
    value_1 = 1,
    value_2 = 15,
    z_1 = 3.6954,
    z_2 = -7.0907,
}
SHARE_PRICE_TRANSFORM.value_delta = SHARE_PRICE_TRANSFORM.value_2 - SHARE_PRICE_TRANSFORM.value_1
SHARE_PRICE_TRANSFORM.z_delta = SHARE_PRICE_TRANSFORM.z_2 - SHARE_PRICE_TRANSFORM.z_1

local SHARE_PRICE_SCALE_BOUNDS = {
    x1 = -4.2186,
    x2 = -1.9203,
    z1 = -7.3828,
    z2 = 5.4881,
}

local WORLD_MAP_BOUNDS = {
    x1 = 0.2625,
    x2 = 8.1033,
    z1 = -7.9578,
    z2 = 1.7061,
}

-- relative to board
local SHARE_DEPOSIT_POSITIONS = {
    green = {
        [1] = { x = 7.1214, y = 2, z = 5.9878 },
        [5] = { x = -7.1289, y = 2, z = -6.0329 },
    },
    red = {
        [1] = { x = 5.1659, y = 2, z = 5.9924 },
        [5] = { x = -7.1349, y = 2, z = -2.0057 },
    },
    blue = {
        [1] = { x = 3.1999, y = 2, z = 5.9807 },
        [5] = { x = -7.1220, y = 2, z = 1.9648 },
    },
    yellow = {
        [1] = { x = 1.2528, y = 2, z = 5.9704 },
        [5] = { x = -7.1191, y = 2, z = 5.9503 },
    },
}

local PLAYER_SHARE_DEPOSITS = {
    -- obsolute deposit positions of the 5 green share for each player
    absolute_positions = {
        White = { x = -5.6002, y = 2, z = -14.6324 },
        Red = { x = -29.2351, y = 2, z = -14.6183 },
        Yellow = { x = -18.0536, y = 2, z = 14.6085 },
        Green = { x = 5.596, y = 2, z = 14.5969 },
        Blue = { x = 29.2419, y = 2, z = 14.6094 },
        Purple = { x = 18.0398, y = 2, z = -14.6423 },
    },

    rotation_y = {
        White = math.pi,
        Red = math.pi,
        Yellow = 0,
        Green = 0,
        Blue = 0,
        Purple = math.pi,
    },

    relative_positions = {
        green = {
            [1] = { x = 0.0166, y = 0, z = 5.3027 },
            [5] = { x = 0, y = 0, z = 0 },
        },
        red = {
            [1] = { x = -3.7270, y = 0, z = 5.2995 },
            [5] = { x = -3.7236, y = 0, z = 0.0077 },
        },
        blue = {
            [1] = { x = -7.4423, y = 0, z = 5.3004 },
            [5] = { x = -7.4585, y = 0, z = 0.0086 },
        },
        yellow = {
            [1] = { x = -11.1645, y = 0, z = 5.3013 },
            [5] = { x = -11.1738, y = 0, z = 0.0026 },
        },
    }
}

local LAST_TURN_TIME = nil
local LAST_TURN_COOLDOWN = 180 -- 3 minutes

local NOTES = string.rep('\n', 11) .. [=[
[b]Hotkeys[/b]

Bind hotkeys via [i]Options[/i] > [i]Game Keys[/i].

[b]Scripting 10[/b] (Default: [i]Keypad 0[/i]):
Moves a Share Card into your deposit area.
Also increases the “Bought Shares” counter.]=]

local OBJECTS = {}

local GAME = nil

local MODELS = {}

-- DEBUG
function onDebug(player_color, object, position, key_up)
    if not key_up then
        return
    end

    print('#################################################')

    if object then
        debug.dumpVector(object.positionToLocal(position))
    end

    print(GAME.state_machine.state)
end

function onLoad(saved_state_json)
    -- invoke afterLoad after all objects have called onLoad
    Wait.frames(afterLoad, 0)

    local saved_state = nil

    if saved_state_json ~= '' then
        saved_state = JSON.decode(saved_state_json)
    end

    GAME = Game.new({
        objects = OBJECTS,
        player_share_deposits = PLAYER_SHARE_DEPOSITS,
        share_deposit_positions = SHARE_DEPOSIT_POSITIONS,
        share_price_transform = SHARE_PRICE_TRANSFORM,
    })

    if saved_state and saved_state.state_machine_state then
        GAME.state_machine.state = saved_state.state_machine_state
    end

    -- discover objects

    OBJECTS.board = getObjectFromGUID(GUIDS.board)

    OBJECTS.numbered_die = discoverObjects({ GUIDS.numbered_die }, function (die)
        die.setVar('kind', 'shark_numbered_die')
    end)

    OBJECTS.indicators = discoverObjects(GUIDS.indicators, function (indicator, company)
        indicator.setVar('kind', 'shark_share_price_indicator')
        indicator.setTable('share_price_indicator', { company = company })
    end)

    OBJECTS.money_deposit_markers = discoverObjects(GUIDS.money_deposit_markers)

    OBJECTS.building_bags = discoverObjects(GUIDS.building_bags, function (bag, company)
        bag.setVar('kind', 'shark_building_bag')
        bag.setTable('building_bag', { company = company })
    end)

    OBJECTS.discarded_building_bag = discoverObjects({ GUIDS.discarded_building_bag }, function (bag)
        bag.setVar('kind', 'shark_discarded_building_bag')
    end)

    OBJECTS.drop_zones = discoverObjects(GUIDS.drop_zones, function (zone)
        zone.setVar('kind', 'shark_drop_zone')
        addModel(zone, DropZoneModel.new(zone, GAME))
    end)

    OBJECTS.player_share_card_zones = discoverObjects(GUIDS.player_share_card_zones, function (zone, color)
        zone.setVar('kind', 'shark_player_share_card_zone')
        zone.setTable('player_share_card_zone', { color = color })

        addModel(zone, PlayerShareCardZoneModel.new(zone, GAME.companies))
    end)

    OBJECTS.hand_zones = discoverObjects(GUIDS.hand_zones, function (zone, color)
        zone.setVar('kind', 'hand_zone')
        zone.setTable('hand_zone', { color = color })
        addModel(zone, HandZoneModel.new(zone))
    end)

    OBJECTS.graph_boards = discoverObjects(GUIDS.graph_boards)

    -- init graphs

    GraphController.init(OBJECTS.graph_boards, GAME)

    if saved_state and saved_state.graph_data then
        GraphController.instance.data = saved_state.graph_data
        GraphController.instance:updateZoom()
    end

    GraphController.instance:renderAll()

    -- hotkeys

    addHotkey('Take Share Card', onTakeShareCardHotkey, true)

    -- DEBUG
    addHotkey('Debug', onDebug, true)

    -- notes

    Notes.setNotes(NOTES)

    -- initialize UI

    local xml_table = UI.getXmlTable()
    local ui_dom = UiDom.new(xml_table)

    LeaderboardController.init(ui_dom, GAME, SEAT_COLORS)
    AssetCountersController.init(ui_dom, GAME, SEAT_COLORS)
    ControlBarController.init(AssetCountersController.instance, LeaderboardController.instance)

    UI.setXmlTable(ui_dom.xml_table)

    -- update UI in next frame
    Wait.frames(function ()
        for _, hand_zone in pairs(OBJECTS.hand_zones) do
            getModel(hand_zone):count()
        end

        for _, player_share_card_zone in pairs(OBJECTS.player_share_card_zones) do
            getModel(player_share_card_zone):count()
        end

        for _, drop_zone in pairs(OBJECTS.drop_zones) do
            getModel(drop_zone):countMoneyAndShares()
        end

        LeaderboardController.instance:updateAll()
        LeaderboardController.instance:render()

        AssetCountersController.instance:updateAll()
    end, 1)
end

function discoverObjects(guids, callback)
    local result = {}

    for key, guid in pairs(guids) do
        local object = getObjectFromGUID(guid)

        result[key] = object

        if callback then
            callback(object, key)
        end
    end

    return result
end

function afterLoad()
    for _, zone in ipairs(OBJECTS.drop_zones) do
        for _, zone_object in ipairs(zone.getObjects()) do
            local kind = zone_object.getVar('kind')

            if kind == 'shark_money_counter' then
                getModel(zone_object).zone = zone
            elseif kind == 'shark_drop_zone_return_button_object' then
                getModel(zone_object).zone = zone
            end
        end
    end
end

function onSave()
    local state = {
        version = SAVED_STATE_VERSION,
        state_machine_state = GAME.state_machine.state,
        graph_data = GraphController.instance.data,
    }

    return JSON.encode(state)
end

function onPlayerTurn(player)
    AssetCountersController.instance:setBoughtShares(player.color, 0, true)

    GAME.state_machine:emitTurnStarted()
end

-- Triggers last turn only once within LAST_TURN_COOLDOWN seconds.
--
-- This will prevent multiple invocations of onLastTurn. The reasoning here is,
-- that players may trigger this function more than once. For instance, by
-- dropping the last building multiple times the last building.
function triggerLastTurn()
    local time = Time.time

    if not LAST_TURN_TIME or time - LAST_TURN_TIME >= LAST_TURN_COOLDOWN then
        LAST_TURN_TIME = time

        onLastTurn()
    end
end

function onLastTurn()
    if not ControlBarController.instance.enable_leaderboard_value then
        UI.show('Panel#lastTurnDialog')
    end
end

function onEnableLeaderboardClick()
    UI.hide('Panel#lastTurnDialog')

    ControlBarController.instance:setEnableLeaderboardValue(true, true)
end

function onDismissLastTurnDialogClick()
    UI.hide('Panel#lastTurnDialog')
end

function onPlayerChangeColor(player_color)
    LeaderboardController.instance:render()
end

function onScriptingButtonUp(index, player_color)
    if index == SCRIPTING_BUTTON_BUY_SHARE then
        local object = Player[player_color].getHoverObject()

        handlePlayerTakeShareCard(player_color, object)
    elseif index == SCRIPTING_BUTTON_DEBUG then
        -- DEBUG
        local object = Player[player_color].getHoverObject()

        print(object)
    end
end

function onTakeShareCardHotkey(player_color, object, position, key_up)
    if key_up then
        handlePlayerTakeShareCard(player_color, object)
    end
end

function onObjectDestroy(object)
    removeModel(object)
end

function onObjectDrop(color, dropped_object)
    local kind = dropped_object.getVar('kind')

    if kind == 'shark_share_price_indicator' then
        for _, zone in pairs(OBJECTS.drop_zones) do
            getModel(zone):countMoneyAndShares()
        end

        LeaderboardController.instance:updateAllPlayerShares()
        LeaderboardController.instance:render()

        AssetCountersController.instance:updateAllPlayerShareValues()

        local properties = dropped_object.getTable('share_price_indicator')

        if withinBoundsOnBoard(dropped_object, SHARE_PRICE_SCALE_BOUNDS) then
            GAME.state_machine:emitIndicatorPlaced()
        end

        if GAME:isAtMaxSharePrice(properties.company) then
            Wait.frames(triggerLastTurn, 0)
        end
    elseif kind == 'shark_building' then
        local properties = dropped_object.getTable('building')

        if withinBoundsOnBoard(dropped_object, WORLD_MAP_BOUNDS) then
            GAME.state_machine:emitBuildingPlaced()
        end

        if GAME:isBuildingBagDepleted(properties.company) then
            Wait.frames(triggerLastTurn, 0)
        end
    elseif kind == 'shark_numbered_die' then
        local velocity = dropped_object.getVelocity()

        -- interpret dropped die as rolled if x-z velocity is high enough
        if velocity.x * velocity.x + velocity.z * velocity.z >= MIN_DICE_ROLL_VELOCITY_SQUARED then
            GAME.state_machine:emitDiceRolled()
        end
    end

    -- DEBUG
    if dropped_object.guid == 'fd701d' then
        Wait.time(function()
            -- local position = Vector(dropped_object.getPosition())
            -- local position = Vector(dropped_object.getPosition()) - Vector{ x = 5.5956, y = 1.46, z = 14.5975 }
            local position = OBJECTS.board.positionToLocal(dropped_object.getPosition())

            local x = math.round(position.x, 4)
            local y = math.round(position.y, 4)
            local z = math.round(position.z, 4)

            Notes.setNotes('{ x = ' .. x .. ', y = ' .. y .. ', z = ' .. z .. ' }')
        end, 2)
    end
end

function onObjectRandomize(randomize_object, player_color)
    local kind = randomize_object.getVar('kind')

    if kind == 'shark_numbered_die' then
        GAME.state_machine:emitDiceRolled()
    end
end

function onObjectEnterScriptingZone(zone, enter_object)
    onObjectEnterOrLeaveScriptingZone(zone, enter_object, nil)
end

function onObjectLeaveScriptingZone(zone, leave_object)
    onObjectEnterOrLeaveScriptingZone(zone, nil, leave_object)
end

function onObjectEnterOrLeaveScriptingZone(zone, enter_object, leave_object)
    local zone_kind = zone.getVar('kind')
    local object_kind = getKind(enter_object or leave_object)

    if zone_kind == 'shark_player_share_card_zone' then
        if object_kind == 'shark_share_card' then
            local zone_model = getModel(zone)
            local player_color = zone_model:getPlayerColor()

            zone_model:count(enter_object)

            LeaderboardController.instance:updatePlayerShareValue(player_color)
            LeaderboardController.instance:render()

            AssetCountersController.instance:updatePlayerShareCounters(player_color)
            AssetCountersController.instance:updatePlayerShareValue(player_color)
        end
    elseif zone_kind == 'shark_drop_zone' then
        if object_kind == 'shark_money' or object_kind == 'shark_share_card' then
            getModel(zone):countMoneyAndShares(enter_object)
        end
    elseif zone_kind == 'hand_zone' then
        if object_kind == 'shark_money' then
            local zone_model = getModel(zone)
            local player_color = zone_model:getPlayerColor()

            zone_model:count(enter_object)

            LeaderboardController.instance:updatePlayerMoney(zone_model:getPlayerColor())
            LeaderboardController.instance:render()

            AssetCountersController.instance:updatePlayerMoney(player_color)
        end
    end
end

function filterObjectEnterContainer(container, object)
    local container_kind = getKind(container)
    local object_kind = getKind(object)

    if container.tag == 'Bag' then
        if container_kind == 'shark_building_bag' then
            if object_kind ~= 'shark_building' then
                return false
            end

            container_company = container.getTable('building_bag').company
            object_company = object.getTable('building').company

            return container_company == object_company
        elseif container_kind == 'shark_discarded_building_bag' then
            return object_kind == 'shark_building'
        end
    elseif container.tag == 'Deck' or container.tag == 'Card' then
        return container_kind == object_kind
    end

    -- default behavior for all other containers
    return true
end

function getSeatedPlayers()
    local players = {}

    for _, color in ipairs(SEAT_COLORS) do
        local player = Player[color]

        if player.seated then
            table.insert(players, player)
        end
    end

    return players
end

function getKind(object)
    local kind = object.getVar('kind')

    -- for decks determine kind by contained cards if unspecified
    if object.tag == 'Deck' and not kind and object.getQuantity() > 0 then
        bagged_object = wrapBaggedObject(object.getObjects()[1])
        kind = bagged_object.getVar('kind')
    end

    return kind
end

function withinBoundsOnBoard(object, bounds)
    local position = object.getPosition()
    local board_position = OBJECTS.board.positionToLocal(position)

    return
        util.between(board_position.x, bounds.x1, bounds.x2) and
        util.between(board_position.z, bounds.z1, bounds.z2)
end

function initObjectState(params)
    local object = params.object
    local state = params.state

    for var_name, value in pairs(state.vars or {}) do
        object.setVar(var_name, value)
    end

    for table_name, value in pairs(state.tables or {}) do
        object.setTable(table_name, value)
    end
end

function registerObject(object)
    local kind = object.getVar('kind')

    if kind == 'shark_money_counter' then
        return addModel(object, MoneyCounterModel.new(object))
    elseif kind == 'shark_drop_zone_return_button_object' then
        return addModel(object, DropZoneReturnButtonModel.new(object))
    end
end

-- Model Management

-- Models implement the behavior of game objects in the game. I prefer to put
-- the behavior in the global script rather than in the object scripts since I
-- have a lot of duplicated game objects (cards, houses, counters) which share
-- the same behavior.

function getModel(object)
    return MODELS[object.guid]
end

function removeModel(object)
    MODELS[object.guid] = nil
end

function addModel(object, model)
    MODELS[object.guid] = model
end

-- Model Management end

-- handlers

function handlePlayerTakeShareCard(player_color, object)
    if not set.contains(SEAT_COLOR_SET, player_color) or not object then
        return
    end

    if object.tag == 'Deck' then
        if object.getQuantity() == 0 then
            return
        end

        local card = wrapBaggedObject(object.getObjects()[1])
        local kind = card.getVar('kind')
        local properties = card.getTable('share')
        local deposit = GAME:getPlayerDepositTarget(player_color, kind, { share = properties })

        if deposit then
            object.takeObject({
                position = deposit.position,
                rotation = deposit.rotation,
            })

            AssetCountersController.instance:increaseBoughtShares(player_color, properties.stock_options)
        end
    elseif object.tag == 'Card' then
        local kind = object.getVar('kind')
        local properties = object.getTable('share')
        local deposit = GAME:getPlayerDepositTarget(player_color, kind, { share = properties })

        if deposit then
            object.setPositionSmooth(deposit.position, false, false)
            object.setRotationSmooth(deposit.rotation, false, false)

            AssetCountersController.instance:increaseBoughtShares(player_color, properties.stock_options)
        end
    end
end
